{
	"info": {
		"_postman_id": "e0d9dcb8-15e3-418b-b5d9-c0af12d36127",
		"name": "Udacity - IAM",
		"description": "A set of http requests to test the Udaciti IAM endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1429750"
	},
	"item": [
		{
			"name": "public / no authorization",
			"item": [
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    pm.expect(jsonData.drinks).to.be.an('array');",
									"});",
									"",
									"pm.test(\"value contains success and is true\", function () {",
									"    pm.expect(jsonData.success).to.eq(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    pm.expect(jsonData.drinks).to.be.an('array');",
									"});",
									"",
									"pm.test(\"value contains success and is true\", function () {",
									"    pm.expect(jsonData.success).to.eq(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"Coffee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks?search=coff",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							],
							"query": [
								{
									"key": "search",
									"value": "coff"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks search nothing found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"value contains empty drinks array\", function () {",
									"    pm.expect(jsonData.drinks).to.be.an('array');",
									"     pm.expect(jsonData.drinks).to.be.an('array').and.to.be.empty;",
									"});",
									"",
									"pm.test(\"value contains success and is true\", function () {",
									"    pm.expect(jsonData.success).to.eq(true);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"shdgahgdyadiasbxiuh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks?search=boobs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							],
							"query": [
								{
									"key": "search",
									"value": "boobs"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks search missing value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"value contains drins array\", function () {",
									"    pm.expect(jsonData.drinks).to.be.an('array').and.not.to.be.empty;",
									"});",
									"",
									"pm.test(\"value contains success and is true\", function () {",
									"    pm.expect(jsonData.success).to.eq(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks?search",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							],
							"query": [
								{
									"key": "search",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks-detail",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks-detail"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n    \"recipe\": [\r\n        {\r\n            \"color\": \"blue\",\r\n            \"name\": \"water\",\r\n            \"parts\": 1\r\n        },\r\n        {\r\n            \"color\": \"green\",\r\n            \"name\": \"juice\",\r\n            \"parts\": 1\r\n        }\r\n    ],\r\n    \"title\": \"20th century\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "barista",
			"item": [
				{
					"name": "Barista token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Save authId\", function () {\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"auth-token-barista\", 'Bearer ' + json.access_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "turtlevet@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Pa$$w0rd",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "read:sample",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "YjjkCnzsIK38F1rVy2Gfa6SD90N34iMF",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "2Pb2r82PMmrMv7gqpH-PCc-m7m1Gs77ifPbdjMPyvpJc-cDvX23zCi8ClUqNfiRe",
									"type": "text"
								},
								{
									"key": "audience",
									"value": "Udacity_IAM_API",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://darthbert-udacity.au.auth0.com/oauth/token",
							"protocol": "https",
							"host": [
								"darthbert-udacity",
								"au",
								"auth0",
								"com"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    pm.expect(jsonData.drinks).to.be.an('array');",
									"});",
									"",
									"pm.test(\"value contains success and is true\", function () {",
									"    pm.expect(jsonData.success).to.eq(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"Coffee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks?search=coff",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							],
							"query": [
								{
									"key": "search",
									"value": "coff"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks search nothing found Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"value contains empty drinks array\", function () {",
									"    pm.expect(jsonData.drinks).to.be.an('array');",
									"     pm.expect(jsonData.drinks).to.be.an('array').and.to.be.empty;",
									"});",
									"",
									"pm.test(\"value contains success and is true\", function () {",
									"    pm.expect(jsonData.success).to.eq(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"search\": \"shdgahgdyadiasbxiuh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks?search=boobs",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							],
							"query": [
								{
									"key": "search",
									"value": "boobs"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks search missing value Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    pm.expect(jsonData.drinks).to.be.an('array');",
									"     pm.expect(jsonData.drinks).to.be.an('array').and.not.to.be.empty;",
									"});",
									"",
									"pm.test(\"value contains success and is true\", function () {",
									"    pm.expect(jsonData.success).to.eq(true);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks?search",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							],
							"query": [
								{
									"key": "search",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks-detail",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks-detail"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{auth-token-barista}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "manager",
			"item": [
				{
					"name": "Manager token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Save authId\", function () {\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"auth-token-manager\", 'Bearer ' + json.access_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "alberto.bonfiglio@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Pa$$w0rd",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "read:sample",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "YjjkCnzsIK38F1rVy2Gfa6SD90N34iMF",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "2Pb2r82PMmrMv7gqpH-PCc-m7m1Gs77ifPbdjMPyvpJc-cDvX23zCi8ClUqNfiRe",
									"type": "text"
								},
								{
									"key": "audience",
									"value": "Udacity_IAM_API",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://darthbert-udacity.au.auth0.com/oauth/token",
							"protocol": "https",
							"host": [
								"darthbert-udacity",
								"au",
								"auth0",
								"com"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks-detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drinks).to.be.an('array')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks-detail",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks-detail"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"    var json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Save drink\", function () {",
									"    pm.collectionVariables.set(\"newDrink\", json.drink[0].id);",
									"    pm.collectionVariables.set(\"drinkTitle\", json.drink[0].title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{$randomPassword}}\",\n    \"recipe\": [{\n        \"name\": \"Water\",\n        \"color\": \"blue\",\n        \"parts\": 1\n    }]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks duplicate title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{drinkTitle}}\",\n    \"recipe\": [{\n        \"name\": \"Water\",\n        \"color\": \"blue\",\n        \"parts\": 1\n    }]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks no title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"recipe\": [{\n        \"name\": \"Water\",\n        \"color\": \"blue\",\n        \"parts\": 1\n    }]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks no recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"title\": \"Waterloo\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/{{newDrink}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"value contains drinks array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.drink).to.be.an('array')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Water\",\n    \"recipe\": [\n                {\n                    \"color\": \"blue\",\n                    \"name\": \"Water\",\n                    \"parts\": 1\n                }\n            ]\n}"
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks/{{newDrink}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks",
								"{{newDrink}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/{{newDrink}} no title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 unprocessable\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var json = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"parts are correct\", function () {",
									"    pm.expect(json.drink[0].recipe[0].parts).to.eq(2);",
									"",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n   \"recipe\": [\r\n                {\r\n                    \"color\": \"blue\",\r\n                    \"name\": \"Water\",\r\n                    \"parts\": 2\r\n                }\r\n            ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks/{{newDrink}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks",
								"{{newDrink}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/{{newDrink}} empty recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 \", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n    \"title\": \"20th century magick\",\r\n    \"recipe\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks/{{newDrink}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks",
								"{{newDrink}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/{{newDrink}} invalid recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 unprocessable\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{            \r\n    \"title\": \"20th century magick\",\r\n    \r\n    \"recipe\": [\r\n            {\r\n                \"color\": \"blue\",\r\n                \"name\": \"water\"\r\n                \r\n            }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/v1.0/drinks/{{newDrink}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks",
								"{{newDrink}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/drinks/{{newDrink}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/v1.0/drinks/{{newDrink}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1.0",
								"drinks",
								"{{newDrink}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{auth-token-manager}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost:5000",
			"type": "string"
		},
		{
			"key": "auth-token-barista",
			"value": "",
			"type": "string"
		},
		{
			"key": "auth-token-manager",
			"value": "",
			"type": "string"
		},
		{
			"key": "newDrink",
			"value": "",
			"type": "string"
		},
		{
			"key": "drinkTitle",
			"value": "",
			"type": "string"
		}
	]
}